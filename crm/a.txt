const mongoose = require('mongoose');
const FormData = require('form-data');
const axios = require('axios');
const fs = require('fs');

// Connect to MongoDB database
mongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true });

// Define a Mongoose schema for storing image data
const ImageSchema = new mongoose.Schema({
  filename: String,
  url: String
});

const ImageModel = mongoose.model('Image', ImageSchema);

// Define a Next.js API route for uploading an image
export default async function handler(req, res) {
  if (req.method === 'POST') {
    const form = new FormData();
    form.append('file', fs.createReadStream(req.body.image.path), req.body.image.originalFilename);
    form.append('filename', req.body.image.originalFilename);

    // Set pCloud access token
    const accessToken = process.env.PCLOUD_ACCESS_TOKEN;

    // Set pCloud folder ID
    const folderId = process.env.PCLOUD_FOLDER_ID;

    try {
      const response = await axios({
        method: 'post',
        url: `https://api.pcloud.com/uploadfile?folderid=${folderId}&access_token=${accessToken}`,
        data: form,
        headers: form.getHeaders()
      });

      // Create a new image record in the database
      const newImage = new ImageModel({
        filename: response.data.metadata.name,
        url: `https://api.pcloud.com/uploadfile`
      });

      await newImage.save();

      res.status(200).json({ message: 'Image uploaded successfully.' });
    } catch (error) {
      console.error(error);
      res.status(500).json({ message: 'An error occurred while uploading the image.' });
    }
  }
}
