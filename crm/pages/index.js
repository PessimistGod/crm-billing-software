import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import Company from '@/Models/createCompany';
import connectDB from '@/Middleware/db';
import jwt_decode from 'jwt-decode';

const Home = ({ company }) => {
  const router = useRouter();
  const [registration, setRegistration] = useState('');

  useEffect(() => {
    const token = localStorage.getItem('token');
    try {
      if (token) {
        const decodedToken = jwt_decode(token);
        setRegistration(decodedToken.id);
      } else {
        router.push('/Authenticate/Login');
      }
    } catch (error) {
      console.error(error);
      router.push('/Authenticate/Login');
    }
  }, []);
console.log((company.map((display)=>(display._id))).length)
  return (
    <>
      <Head>
        <title>CRM Billing System</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <section className="container bg-white flex items-center justify-center h-screen flex-col">
        <div className="font-extrabold text-4xl text-purple-600">
          Welcome to Our Customer Relation Management System!
        </div>

        {company && ((company.map((display)=>(display._id))).length)===0 &&
  <Link href="/Create/createCompany">
    <button className="px-8 mt-5 py-3 bg-blue-600">Add Company</button>
  </Link>
}
        {company &&
          company
            .filter((author) => (author.author === registration))
            .map((item) => (
              <div key={item._id}>{item._id}</div>
            ))}


      </section>
    </>
  );
};

export default Home;

export async function getServerSideProps(context) {
  try {
    await connectDB();

    const company = await Company.find({})

    const companyDetails = company.map((item) => ({
      _id: item.id,
      ownerName: item.ownerName,
      companyName: item.companyName,
      companyStreet: item.companyStreet,
      companyCity: item.companyCity,
      companyState: item.companyState,
      companyZipcode: item.companyZipcode,
      companyCountry: item.companyCountry,
      author: (item.author) ? (JSON.stringify(item.author).slice(1, -1)) : "",
    }));
    console.log(companyDetails)
    return {
      props: {
        company: companyDetails,
      },
    };
  } catch (error) {
    console.log(error);
    return {
      props: { company: [] },
    };
  }
}
